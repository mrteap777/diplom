import streamlit as st
import tempfile
import os
import requests
import pandas as pd
import cv2
from typing import Dict 

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Streamlit
st.set_page_config(
    page_title="–û–Ω–ª–∞–π–Ω –§–∏–∑–∫—É–ª—å—É—Ç—Ä–∞",
    page_icon="üèãÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
if 'exercise_ranges' not in st.session_state:
    st.session_state.exercise_ranges = []
    
exercise_types = ["–û—Ç–∂–∏–º–∞–Ω–∏—è", "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è", "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è", "–ü–ª–∞–Ω–∫–∞", "–í—ã–ø–∞–¥—ã"]

def calculate_workout_score(plan_name: str, stats_df: pd.DataFrame) -> Dict:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    plan_stats = {
        "–ù–æ–≤–∏—á–æ–∫ ‚Äì 1 –∫—Ä—É–≥": {
            "–û—Ç–∂–∏–º–∞–Ω–∏—è": 10,
            "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è": 20,
            "–ü–ª–∞–Ω–∫–∞": 30 
        },
        "–ö–ª–∞—Å—Å–∏–∫–∞ ‚Äì 2 –∫—Ä—É–≥–∞": {
            "–û—Ç–∂–∏–º–∞–Ω–∏—è": 15,
            "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è": 30,
            "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è": 10,
            "–ü–ª–∞–Ω–∫–∞": 45
        },
        "–ü–æ–ª–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞": {
            "–û—Ç–∂–∏–º–∞–Ω–∏—è": 20,
            "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è": 30,
            "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è": 15,
            "–ü–ª–∞–Ω–∫–∞": 60,
            "–í—ã–ø–∞–¥—ã": 20
        },
        "–°–∏–ª–æ–≤–∞—è": {
            "–û—Ç–∂–∏–º–∞–Ω–∏—è": 30,
            "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è": 20,
            "–ü–ª–∞–Ω–∫–∞": 90
        },
        "–ù–æ–≥–∏ –∏ –∫–æ—Ä–ø—É—Å": {
            "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è": 40,
            "–í—ã–ø–∞–¥—ã": 30,
            "–ü–ª–∞–Ω–∫–∞": 60
        }
    }
    
    if plan_name not in plan_stats:
        return {"error": "Unknown plan"}
    
    results = {}
    total_percent = 0
    exercise_count = 0
    
    for exercise, target in plan_stats[plan_name].items():
        # –î–ª—è –ø–ª–∞–Ω–∫–∏ —É—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if exercise == "–ü–ª–∞–Ω–∫–∞":
            actual = stats_df.loc[exercise, "–í—Ä–µ–º—è (—Å–µ–∫)"] if exercise in stats_df.index else 0
        else:
            actual = stats_df.loc[exercise, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] if exercise in stats_df.index else 0
        
        percent = min(100, round((actual / target) * 100)) if target > 0 else 0
        results[exercise] = {
            "target": target,
            "actual": actual,
            "percent": percent
        }
        total_percent += percent
        exercise_count += 1
    
    if exercise_count > 0:
        overall_percent = total_percent / exercise_count
        # –û—Ü–µ–Ω–∫–∞ –æ—Ç 1 –¥–æ 5
        if overall_percent >= 90:
            grade = "5 (–û—Ç–ª–∏—á–Ω–æ)"
        elif overall_percent >= 70:
            grade = "4 (–•–æ—Ä–æ—à–æ)"
        elif overall_percent >= 50:
            grade = "3 (–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ)"
        elif overall_percent >= 30:
            grade = "2 (–ü–ª–æ—Ö–æ)"
        else:
            grade = "1 (–û—á–µ–Ω—å –ø–ª–æ—Ö–æ)"
    else:
        overall_percent = 0
        grade = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    return {
        "exercises": results,
        "overall_percent": overall_percent,
        "grade": grade
    }

def show_workout_summary(plan_name: str, stats_df: pd.DataFrame):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    st.subheader("üìù –°–≤–æ–¥–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞")
    
    summary = calculate_workout_score(plan_name, stats_df)
    
    if "error" in summary:
        st.error(summary["error"])
        return
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    summary_data = []
    for ex, data in summary["exercises"].items():
        summary_data.append({
            "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ": ex,
            "–ü–ª–∞–Ω": data["target"],
            "–í—ã–ø–æ–ª–Ω–µ–Ω–æ": data["actual"],
            "–ü—Ä–æ—Ü–µ–Ω—Ç": f"{data['percent']}%",
            "–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä": data["percent"]
        })
    
    df_summary = pd.DataFrame(summary_data)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    st.dataframe(df_summary)
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –æ–±—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    st.metric("–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", f"{summary['overall_percent']:.0f}%")
    st.progress(summary['overall_percent'] / 100)
    
    # –û—Ü–µ–Ω–∫–∞
    st.markdown(f"### –û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {summary['grade']}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if summary['overall_percent'] >= 90:
        st.success("üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!")
    elif summary['overall_percent'] >= 70:
        st.info("üëç –•–æ—Ä–æ—à–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞! –ü–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!")
    elif summary['overall_percent'] >= 50:
        st.warning("üëå –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –µ—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª—å—à–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.")
    else:
        st.error("üí™ –°–ª–∏—à–∫–æ–º –º–∞–ª–æ! –í–∞–º –Ω—É–∂–Ω–æ —Å–µ—Ä—å–µ–∑–Ω–µ–µ –ø–æ–¥–æ–π—Ç–∏ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!")

def extract_exercise_ranges(video_path: str) -> list:
    """–§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Ç—Ä–µ–∑–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    st.subheader("üìù –†–∞–∑–º–µ—Ç–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
    cap = cv2.VideoCapture(video_path)
    fps = cap.get(cv2.CAP_PROP_FPS)
    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    duration = total_frames / fps
    cap.release()
    
    st.info(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: {duration:.2f} —Å–µ–∫ ({total_frames} –∫–∞–¥—Ä–æ–≤)")
    
    st.markdown("### –ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        exercise_type = st.selectbox("–¢–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", exercise_types, key="ex_type_input")
    with col2:
        start_sec = st.number_input("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (—Å–µ–∫)", min_value=0.0, max_value=float(duration), value=0.0, step=0.1, key="start_sec")
    with col3:
        end_sec = st.number_input("–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞ (—Å–µ–∫)", min_value=0.0, max_value=float(duration), value=5.0, step=0.1, key="end_sec")
    with col4:
        if st.button("–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª"):
            if start_sec < end_sec:
                st.session_state.exercise_ranges.append((start_sec, end_sec, exercise_type))
                st.success(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è {exercise_type}: {start_sec:.2f} —Å–µ–∫ - {end_sec:.2f} —Å–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω")
            else:
                st.error("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–Ω—Ü–∞")
    
    st.subheader("üìã –¢–µ–∫—É—â–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞")
    if st.session_state.exercise_ranges:
        df_ranges = pd.DataFrame(
            st.session_state.exercise_ranges,
            columns=["–ù–∞—á–∞–ª–æ (—Å–µ–∫)", "–ö–æ–Ω–µ—Ü (—Å–µ–∫)", "–¢–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"]
        )
        df_ranges["–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)"] = df_ranges["–ö–æ–Ω–µ—Ü (—Å–µ–∫)"] - df_ranges["–ù–∞—á–∞–ª–æ (—Å–µ–∫)"]
        st.dataframe(df_ranges)
        if st.button("‚ùå –û—á–∏—Å—Ç–∏—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É"):
            st.session_state.exercise_ranges = []
            st.rerun()
    else:
        st.info("–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω—ã")
    
    return st.session_state.exercise_ranges

def show_results(result: dict, plan_name: str):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    st.success(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {result['processing_time']:.2f} —Å–µ–∫")
    st.markdown("---")
    
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    filtered_stats = {
        ex: stats for ex, stats in result['exercise_stats'].items()
        if stats["count"] > 0 or stats["time"] > 0
    }

    if filtered_stats:
        stats_df = pd.DataFrame.from_dict(filtered_stats, orient='index')
        stats_df.columns = ["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–í—Ä–µ–º—è (—Å–µ–∫)"]
        st.dataframe(stats_df)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –ø–ª–∞–Ω—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        show_workout_summary(plan_name, stats_df)
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫–∏")
        col1, col2 = st.columns(2)
        with col1:
            st.bar_chart(stats_df["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])
            st.caption("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤")
        with col2:
            st.bar_chart(stats_df["–í—Ä–µ–º—è (—Å–µ–∫)"])
            st.caption("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å–µ–∫)")
    else:
        st.warning("‚õî –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã –∏–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.")

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üèãÔ∏è –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞ –æ–Ω–ª–∞–π–Ω")

# –ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
st.subheader("üß© –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")

plans = {
    "–ù–æ–≤–∏—á–æ–∫ ‚Äì 1 –∫—Ä—É–≥": [
        "10 –æ—Ç–∂–∏–º–∞–Ω–∏–π",
        "20 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π",
        "30 —Å–µ–∫—É–Ω–¥ –ø–ª–∞–Ω–∫–∏"
    ],
    "–ö–ª–∞—Å—Å–∏–∫–∞ ‚Äì 2 –∫—Ä—É–≥–∞": [
        "15 –æ—Ç–∂–∏–º–∞–Ω–∏–π",
        "30 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π",
        "10 –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–π",
        "45 —Å–µ–∫—É–Ω–¥ –ø–ª–∞–Ω–∫–∏"
    ],
    "–ü–æ–ª–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞": [
        "20 –æ—Ç–∂–∏–º–∞–Ω–∏–π",
        "30 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π",
        "15 –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–π",
        "60 —Å–µ–∫—É–Ω–¥ –ø–ª–∞–Ω–∫–∏",
        "20 –≤—ã–ø–∞–¥–æ–≤"
    ],
    "–°–∏–ª–æ–≤–∞—è": [
        "30 –æ—Ç–∂–∏–º–∞–Ω–∏–π",
        "20 –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–π",
        "90 —Å–µ–∫—É–Ω–¥ –ø–ª–∞–Ω–∫–∏"
    ],
    "–ù–æ–≥–∏ –∏ –∫–æ—Ä–ø—É—Å": [
        "40 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π",
        "30 –≤—ã–ø–∞–¥–æ–≤",
        "60 —Å–µ–∫—É–Ω–¥ –ø–ª–∞–Ω–∫–∏"
    ]
}

plan_name = st.selectbox("–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", list(plans.keys()), index=0)

st.markdown("**–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**")
for i, step in enumerate(plans[plan_name], 1):
    st.markdown(f"{i}. {step}")

st.markdown("""
    ### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
    1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.
    2. –ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.
    3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑.
    4. –ü–æ–ª—É—á–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é.
""")
st.markdown("---")

uploaded_file = st.file_uploader(
    "üì§ –ó–ê–ì–†–£–ó–ò–¢–ï –í–ò–î–ï–û –¢–†–ï–ù–ò–†–û–í–ö–ò",
    type=["mp4", "avi", "mov"],
    help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP4, AVI, MOV"
)

if uploaded_file:
    temp_dir = tempfile.mkdtemp()
    input_path = os.path.join(temp_dir, "input.mp4")
    
    with open(input_path, "wb") as f:
        f.write(uploaded_file.getbuffer())
    
    st.subheader("üé¨ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ")
    st.video(input_path)

    exercise_ranges = extract_exercise_ranges(input_path)
    
    if exercise_ranges and st.button("üöÄ –ù–ê–ß–ê–¢–¨ –ê–ù–ê–õ–ò–ó –£–ü–†–ê–ñ–ù–ï–ù–ò–ô", use_container_width=True):
        with st.spinner("‚è≥ –ê–Ω–∞–ª–∏–∑ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π..."):
            try:
                with open(input_path, 'rb') as f:
                    files = {'video': f}
                    data = {
                        'exercise_ranges': str(exercise_ranges),
                        'model_complexity': 1
                    }
                    response = requests.post('http://localhost:5000/process_video', files=files, data=data)
                
                if response.status_code == 200:
                    result = response.json()
                    show_results(result, plan_name)
                    
                    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    csv = pd.DataFrame.from_dict(result['exercise_stats'], orient='index').to_csv(index=True).encode('utf-8')
                    st.download_button(
                        label="üìä –°–ö–ê–ß–ê–¢–¨ –°–¢–ê–¢–ò–°–¢–ò–ö–£",
                        data=csv,
                        file_name="workout_stats.csv",
                        mime="text/csv",
                        use_container_width=True
                    )
                else:
                    st.error(f"–û—à–∏–±–∫–∞ API: {response.text}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {str(e)}")
        
        try:
            os.remove(input_path)
            os.rmdir(temp_dir)
        except Exception as e:
            st.error(f"üö® –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}")

st.markdown("---")
st.markdown("üõ†Ô∏è Created with Streamlit & Flask API | –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞ –û–Ω–ª–∞–π–Ω")